# -*- coding: utf-8 -*-
"""ScientificComputingWithPython_Exercise1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sK8G0mR3wfy9RTWfV7u9WphH-1W6Kf4P

## *Problem No.1:*
**The HelloWorld replacement**

a) Write a program that:

prints the numbers from 1 to 100
but for multiples of three print "Hello" instead of the number and for the multiples of five print "World"
for numbers which are multiples of both three and five print "HelloWorld"
"""

for i in range(1,101):
  if i % 15 == 0:
    print("HelloWorld")
  elif (i % 3 == 0):
    print("Hello")
  elif (i % 5 == 0):
    print("World")
  else:
    print(i)

"""b) Put the result in a tuple and substitute "Hello" with "Python" and "World" with "Works"."""

l = []
for i in range(1,101):
  if i % 15 == 0:
    l.append("HelloWorld")
  elif (i % 3 == 0):
    l.append("Python")
  elif (i % 5 == 0):
    l.append("Works")
  else:
    l.append(i)
print(tuple(l))

"""# *Problem No.2:*
**The swap**

Write a program that swaps the values of two input variables x and y from command line (whatever the type).

Try to do that without using a temporary variable, exploiting the Python syntax.
"""

x = int(input("Enter first number:"))
y = int(input("Enter second number:"))
print("x and y are:", x , "&" , y)
x , y = y , x 
print("After Swapping the result will be:","x =",x, "&","y =",y)

"""# ***Problem No.3:***
**Computing the distance**

Write a function that calculates and returns the euclidean distance between two points u and v in a 2D space, where u and v are both 2-tuples (x,y).

Example: if u=(3,0) and v=(0,4), the function should return 5.

Hint: in order to compute the square root, import the math library with import math and use math.sqrt().
"""

#First of all import library we want
import math
def EuclideanDist(u,v):
  #First calculate x
  x = float(u[0]) - float(v[0])
  #Second calculate y 
  y = float(u[1]) - float(v[1])
  #Calculate distance
  z = math.sqrt(pow(x,2) + pow(y,2))
  return z 
u = tuple(input("Enter two dimentions x and y Values for u:").split())
v = tuple(input("Enter two dimentions x and y Values for v:").split())
print(EuclideanDist(u,v))

"""# ***Problem No.4:***
**Counting letters**

Write a program that calculates the number of times each character occurs in a given string. Ignore differences in capitalization.

The strings are in the cell below.

s1 = "Write a program that prints the numbers from 1 to 100. \
But for multiples of three print Hello instead of the number and for the multiples of five print World. \
For numbers which are multiples of both three and five print HelloWorld."

s2 = "The quick brown fox jumps over the lazy dog"
"""

from collections import Counter
#Combine two strings
s1 = "Write a program that prints the numbers from 1 to 100.But for multiples of three print Hello instead of the number and for the multiples of five print World.For numbers which are multiples of both three and five print HelloWorld."
s2 = "The quick brown fox jumps over the lazy dog"
s3 = s1 + s2
print("Our sum string is:",s3)
s3 = s3.lower()
collection = Counter(s3)
print(collection)

"""# ***Problem No.5:***
**Isolating the unique**

Write a program that determines and counts the unique numbers in the list:

l = [36, 45, 58, 3, 74, 96, 64, 45, 31, 10, 24, 19, 33, 86, 99, 18, 63, 70, 85,
 85, 63, 47, 56, 42, 70, 84, 88, 55, 20, 54, 8, 56, 51, 79, 81, 57, 37, 91,
 1, 84, 84, 36, 66, 9, 89, 50, 42, 91, 50, 95, 90, 98, 39, 16, 82, 31, 92, 41,
 45, 30, 66, 70, 34, 85, 94, 5, 3, 36, 72, 91, 84, 34, 87, 75, 53, 51, 20, 89, 51, 20]
"""

#First solution:
l = [36, 45, 58, 3, 74, 96, 64, 45, 31, 10, 24, 19, 33, 86, 99, 18, 63, 70, 85,
 85, 63, 47, 56, 42, 70, 84, 88, 55, 20, 54, 8, 56, 51, 79, 81, 57, 37, 91,
 1, 84, 84, 36, 66, 9, 89, 50, 42, 91, 50, 95, 90, 98, 39, 16, 82, 31, 92, 41,
 45, 30, 66, 70, 34, 85, 94, 5, 3, 36, 72, 91, 84, 34, 87, 75, 53, 51, 20, 89, 51, 20]
#This method will give us the sorted answer
ListOfUniqueValues = set(l)
print("The list with unique values is:", ListOfUniqueValues)
print("And the length of it is:", len(ListOfUniqueValues))

#Second solution:
l = [36, 45, 58, 3, 74, 96, 64, 45, 31, 10, 24, 19, 33, 86, 99, 18, 63, 70, 85,
 85, 63, 47, 56, 42, 70, 84, 88, 55, 20, 54, 8, 56, 51, 79, 81, 57, 37, 91,
 1, 84, 84, 36, 66, 9, 89, 50, 42, 91, 50, 95, 90, 98, 39, 16, 82, 31, 92, 41,
 45, 30, 66, 70, 34, 85, 94, 5, 3, 36, 72, 91, 84, 34, 87, 75, 53, 51, 20, 89, 51, 20] 
ListOfUniqueValues = [ x for i, x in enumerate(l) if x not in l[:i]]
print(ListOfUniqueValues)
print("No of unique items in the list are:", len(ListOfUniqueValues))

#Third solution:
l = [36, 45, 58, 3, 74, 96, 64, 45, 31, 10, 24, 19, 33, 86, 99, 18, 63, 70, 85,
 85, 63, 47, 56, 42, 70, 84, 88, 55, 20, 54, 8, 56, 51, 79, 81, 57, 37, 91,
 1, 84, 84, 36, 66, 9, 89, 50, 42, 91, 50, 95, 90, 98, 39, 16, 82, 31, 92, 41,
 45, 30, 66, 70, 34, 85, 94, 5, 3, 36, 72, 91, 84, 34, 87, 75, 53, 51, 20, 89, 51, 20] 
count = 0
ListOfUniqueValues = []
for x in l:
    if x not in ListOfUniqueValues:
        count += 1
        ListOfUniqueValues.append(x)
 
print("The list with unique values is:",ListOfUniqueValues)
print("And the length of it is:", count)

"""Other way to solve the problem:"""

l = [36, 45, 58, 3, 74, 96, 64, 45, 31, 10, 24, 19, 33, 86, 99, 18, 63, 70, 85,85, 63, 47, 56, 42, 70, 84, 88, 55, 20, 54, 8, 56, 51, 79, 81, 57, 37, 91,1, 84, 84, 36, 66, 9, 89, 50, 42, 91, 50, 95, 90, 98, 39, 16, 82, 31, 92, 41,45, 30, 66, 70, 34, 85, 94, 5, 3, 36, 72, 91, 84, 34, 87, 75, 53, 51, 20, 89, 51, 20]
l = l.sort()
print(l)

"""# ***Problem No.6:***
Casting

a)reads from command line two variables, that can be either int, float, or str.
"""

x = input("Enter the fisrt variable:")
y = input("Enter the second variable:")

"""b)use the try/except expressions to perform the addition of these two variables, only if possible"""

x = input("Enter the fisrt variable:")
y = input("Enter the second variable:")
z = x + y
try:
  x = int(x)
  y = int(y)
  z = x + y
  print("The sum of two integer is:",z)
except:
  print("The sum is not possible.(two integer)")

try:
  x = float(x)
  y = float(y)
  z = x + y
  print("The sum of two float is:",z)
except:
  print("The sum is not possible.(two flaot)")

try:
  x = str(x)
  y = str(y)
  print("For all inputs if we consider them as string, the result will be:", z)
  print("No error if we condsider everything as string :)")
except:
  print("You will never see this line :)")

"""# ***Problem No.7:***
**Cubes**

Create a list of the cubes of x for x in [0, 10] using:

a) a for loop
"""

l = []
for i in range(1,11):
  a = i ** 3
  l.append(a)
print(l)

"""b) a list comprehension"""

l = [1,2,3,4,5,6,7,8,9,10]
cube = [pow(i, 3) for i in l]
print(cube)

"""# ***Problem No.8:***
**List comprehension**

Write, using the list comprehension, a single-line expression that gets the same result as the code in the cell below.
"""

a = []
for i in range(3):
    for j in range(4):
        a.append((i, j))
print(a)

#Solution:
a = [(x,y) for x in range(3) for y in range(4)]
print(a)

"""# ***Problem No.9:***
**Nested list comprehension**

A Pythagorean triple is an integer solution to the Pythagorean theorem a^2 + b^2 = c^2 . The first Pythagorean triple is (3, 4, 5).

Find and put in a tuple all unique Pythagorean triples for the positive integers ,  and  with all possible integers a,b and c with c <100 .
"""

[(a,b,c) for c in range(1,101) for a in range(c) for b in range(a) if a**2 + b**2 == c**2]

"""# ***Problem No.10:***
**Normalization of a N-dimensional vector**

Write a program that takes an N-dimensional vector, e.g. a variable-length tuple of numbers, and normalizes it to one (in such a way that the squared sum of all the entries is equal to 1)
"""

import math
vector = tuple(input("Enter vector:").split())
l = []
sum = 0
for i in range (0,len(vector)):
  l.append(vector[i])
for x in l:
  a = (int(x)**2)
  sum += a
print("The magnitude is = sqrt of",sum , "(",math.sqrt(sum),")")
print("For normalizing we should divide every arrays by magnitude")
for y in range(len(l)):
  l[y] = float(l[y])/math.sqrt(sum)
print(l)

"""# ***Problem No.11:***
**The Fibonacci sequence**

Calculate the first 20 numbers of the Fibonacci sequence using only for or while loops.
"""

FirstNumber = 0 
SecondNumber = 1
count = 0
limit = 20
while count < limit:
       print(FirstNumber)
       NextNumber = FirstNumber + SecondNumber
       FirstNumber = SecondNumber
       SecondNumber = NextNumber
       count += 1
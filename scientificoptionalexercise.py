# -*- coding: utf-8 -*-
"""ScientificOptionalExercise.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Sp5a3igh2mzdgCqwh_iPFZ5RT_ki3k3h

**write an algorithm that determines and quantifies a correlation between two time series. Use as an example the hare-lynx-carrot dataset.**

# ***Dataset:***
Data in populations.txt describes the populations of hares and lynxes and carrots in northern Canada during 20 years.
"""

!wget http://scipy-lectures.org/_downloads/populations.txt

import pandas as pd 
df = pd.read_csv("populations.txt" , sep = "\s+")
df1 = df.shift(periods = 1, axis = "columns")
df2 = df1.drop(["#"], axis = 1)
#df.columns = ["year", "hare" , "lynx" , "carrot"]
df2

import matplotlib.pyplot as plt
import seaborn as sns
fig = plt.figure(figsize = (8, 6))
sns.lineplot(data = df2, x = "year" , y = "hare" , color = "g")
sns.lineplot(data = df2, x = "year" , y = "lynx" , color ="c")
sns.lineplot(data = df2, x = "year" , y = "carrot" , color ="orange")
plt.title("Visualization based on the years", weight = "bold", fontsize = 15)
plt.ylabel("populations , g = hare , c = lynx , o = carrot", weight = "bold" , fontsize = 12)
plt.xlabel("Years" , weight = "bold", fontsize = 12)
plt.show()

fig = plt.figure(figsize = (8, 6))
sns.regplot(data = df2, x = "year", y = "hare")
sns.regplot(data = df2, x = "year", y = "lynx")
sns.regplot(data = df2, x = "year", y = "carrot")
plt.title("Visualization based on the years", weight = "bold", fontsize = 15)
plt.ylabel("populations , g = hare , c = lynx , o = carrot", weight = "bold" , fontsize = 12)
plt.xlabel("Years" , weight = "bold", fontsize = 12)
plt.show()

overall_pearson_r = df2.corr().iloc[0:3]
print(f"Pandas computed correlation:\n {overall_pearson_r}")

import scipy.stats as stats
r, p = stats.pearsonr(df2.dropna()["hare"], df2.dropna()["lynx"])
print("The Scipy correlation computing for hare and lynx :" , r , "and p_value: " , p)

corr_p = df2[["hare" , "lynx" , "carrot"]].corr(method = "pearson")
print("The correlation using pearson:\n " , corr_p)

corr_s = df2[["hare" , "lynx" , "carrot"]].corr(method = "spearman")
print("The correlation using spearman:\n " , corr_s)

#Testing the null hypothesis that the variables are stationary
from statsmodels.tsa.stattools import adfuller
def adf_test(timeseries):
    dftest = adfuller(timeseries, autolag = "AIC")
    result = pd.Series(dftest[0:4], index = ["Test Statistic" , "P-value" , "Lags Used" , "No of Observations"])
    for key,value in dftest[4].items():
        result["Critical Value (%s)"%key] = value
    return result
    
    adf_table = df.drop("year" , axis = 1)
    adf_table.apply(adf_test, axis = 0)
adf_test(df2["year"])

adf_test(df2["hare"])

adf_test(df2["lynx"])

adf_test(df2["carrot"])

#Cross correlation coefficients for the hare and lynx
from scipy import signal
import numpy as np
def ccf_values(series1, series2):
    p = series1
    q = series2 
    p = (p - np.mean(p)) / (np.std(p) * len(p))
    q = (q - np.mean(q)) / (np.std(q)) 
    c = np.correlate(p, q, "full")
    return c
    
ccf_harelynx = ccf_values(df2["hare"], df2["lynx"])
ccf_harelynx

lag = signal.correlation_lags(len(df2["hare"]), len(df2["lynx"]))

def ccf_plot(lag, ccf):
    fig, ax = plt.subplots(figsize = (9, 6))
    ax.plot(lag , ccf)
    ax.axhline(-2/np.sqrt(23) , color = "r", label = "5% confidence interval")
    ax.axhline(2/np.sqrt(23), color = "red")
    ax.axvline(x = 0, color = "k" , lw = 1)
    ax.axhline(y = 0, color = "k" , lw = 1)
    ax.axhline(y = np.max(ccf) , color = "b" , lw = 1 , linestyle = "--" , label = "highest +/- correlation")
    ax.axhline(y = np.min(ccf) , color = "b", lw = 1 , linestyle = "--")
    ax.set(ylim = [-1, 1])
    ax.set_title("Cross Correation hare and lynx" , weight = "bold", fontsize = 15)
    ax.set_ylabel("Correlation Coefficients", weight = "bold", fontsize = 12)
    ax.set_xlabel("Time Lags", weight = "bold" , fontsize = 12)
    plt.legend()

ccf_plot(lag , ccf_harelynx)

"""And for two other combinations ( ["hare" , "carrot"] , ["carrot" , "lynx"] ) just like this again."""
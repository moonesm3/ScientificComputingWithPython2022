# -*- coding: utf-8 -*-
"""Scientific11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RrToddrDHXPlDEPNMCGRNN--RSeQLu7w

# ***Import Simple Essential libraries:***
"""

# Commented out IPython magic to ensure Python compatibility.
import math
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
from scipy import optimize, stats

"""# ***Exe01:***
**Radioactive decay chain**

${\rm Tl}^{208}$ decays to ${\rm Pb}^{208}$ with a half-life $\tau$ of 3.052 minutes. Suppose to start with a sample of 1000 Thallium atoms and 0 of Lead atoms.

* Take steps in time of 1 second and at each time-step decide whether each Tl atom has decayed or not, accordingly to the probability $p(t)=1-2^{-t/\tau}$. Subtract the total number of Tl atoms that decayed at each step from the Tl sample and add them to the Lead one. Plot the evolution of the two sets as a function of time  
* Repeat the exercise by means of the inverse transform method: draw 1000 random numbers from the non-uniform probability distribution $p(t)=2^{-t/\tau}\frac{\ln 2}{\tau}$ to represent the times of decay of the 1000 Tl atoms. Make a plot showing the number of atoms that have not decayed as a function of time
"""

DecayMin = 3.052
DecaySec = 3.052 * 60  #Convert to Second
Ti = 1000
Pb = 0
TiTime = [Ti]
PbTime = [Pb]
DecayProb = 1 - 2 ** (-1 / DecaySec)  #Time of 1 second
while Ti > 0:
        for i in range(Ti):
            if np.random.rand() < DecayProb:
                Ti -= 1
                Pb += 1
        TiTime.append(Ti)
        PbTime.append(Pb)
time = np.arange(0, len(TiTime))
fig, ax = plt.subplots()
ax.plot(time, TiTime, label = "Ti atoms" , color = "g")
ax.plot(time, PbTime, label = "Pb atoms" , color = "r")
ax.set_xlabel("Time")
ax.set_ylabel("Atoms")
ax.legend()
plt.show()

def Distribution(x, tau):
    return -tau * np.log2(1 - x)
x = np.random.random(1000)
y = Distribution(x, DecaySec)
fig, ax = plt.subplots()
time = np.arange(0 , 2000)
Y = [y[y > i].shape[0] for i in time]
ax.plot(time , Y, color = "purple")
ax.set_xlabel("Time")
ax.set_ylabel("Atoms")
plt.show()

"""# ***Exe02:***
**Monte Carlo integration: hit/miss vs mean value method**

Consider the function: 

$$f(x) =\sin^2{\left( \frac{1}{1-x} \right)}$$

* Plot the function and compute the integral of $f(x)$ between 0 and 2 with the hit/miss method. Evaluate the error of your estimate (hint: repeat the integral $N$ times, and from the distribution of the integrals take the mean value and the standard deviation, the latter rescaled by the appropriate factor)
* Repeat the integral with the mean value method. Evaluate the error and compare it with the previous one.
"""

#Define the function
def Function(x):
    return (np.sin(1 / (1 - x))) ** 2

#Plot the data
x = np.linspace(0 , 2, 1000)
plt.figure()
plt.plot(x , Function(x) , "xkcd:sky blue")
plt.show()

#Hit miss method
def Function1():
    N = 10000
    t = 0
    for i in range(N):
        x = 2 * np.random.random() 
        y = np.random.random()
        if y < Function(x): 
            t = t + 1
    I = 2 * t / N
    return I
print("The Integral of hit miss method:" , Function1())

#Evaluating for hit miss
n = 1000
I1 = np.zeros(n) 
for i in range(n):
    I1[i] = Function1()
mean = np.mean(I1)
std = np.std(I1)
print("For hit miss method: with mean:" , mean , "and standard deviation: " , std)

#Now compute the mean value method
x = np.linspace(0,2,1000)
mean1 = (2/1000) * np.sum(Function(x))
std1 = 1 / np.sqrt(1000)
print("Mean value: of Mean value method ", mean1 , "and standard deviation: " , std1)

"""# ***Exe03:***
**Monte Carlo integration in high dimension**

* Compute the area of a circle of unit radius, by integrating the function:

$$
f(x,y)=
\left\{
\begin{array}{ll}
      1 & x^2+y^2\le 1 \\
      0 & {\rm elsewhere}
\end{array} 
\right.
$$

* Generalize the result for a 10D sphere.
"""

Dots = 0
N = 1000
x1 = np.random.uniform(-1, 1 , N)
y1 = np.random.uniform(-1, 1 , N)
for i in range(N):
  if x1.all() ** 2 + y1.all() ** 2 < 1 : 
    Dots += 1
inside_dots = 0
for i in range(N):
    X= np.array([np.random.uniform(-1, 1) for i in range(10)])   
    if np.sum(X**2) < 1: 
        inside_dots += 1
Integral = (inside_dots/N) * (2**10)
print("The 10D sphere integral:", Integral)

"""# ***Exe04:***
**Monte Carlo integration with importance sampling** 

Calculate the value of the integral:

$$
I=\int_0^1 \frac{x^{-1/2}}{e^x+1} dx
$$

using the importance sampling method with $w(x)=1/\sqrt{x}$. You should expect a result around 0.84.
"""

#First defining two functions 
def I_nonIntegral(x):
    return ((x ** (-1/2)) / (np.exp(x) + 1))

def w(x):
    return (1 / np.sqrt(x))

#Now calculate the value of the integral
N = 10000
#Generate a distribution of random points
y = np.random.random(N)
#Calculate the normalization factor given by the integral of the weight function over the integration domain
w_int = np.sum(w(y)) / N
x = np.random.uniform(0, 1, N) ** 2
h_is = (1.0 / N) * np.sum(I_nonIntegral(x) / w(x)) * w_int
print("IS Integral:", h_is)
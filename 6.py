# -*- coding: utf-8 -*-
"""ScientificComputingWithPython_Exercise6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_4YLQDRqqsFSzH9Fr-qVmKT-VOYXWcWC
"""

import pandas as pd
import numpy as np

"""# ***Exe.1:***
Perform the following operations on plain txt files:

create a list of integrer numbers and then save it to a text file named data_int.txt. Run the cat command to print the content of the file.

create a matrix of 5x5 floats and then save it to a text file named data_float.txt. Use the cat command to print the content of the file.

load the txt file of the previous point and convert it to a csv file by hand.
"""

import random
l = []
for i in range(5):
  l.append(random.randint(1, 10))
with open("data_int.txt",'w',encoding = 'utf-8') as f:
  for i in l:
    f.write(f'{i}\n')

!cat data_int.txt

Matrix = np.arange(25).reshape((5,5))
print("First Matrix of 5*5: \n" , Matrix)
m =[]
SecondMatrix = np.array
for i in range(25):
  m.append(np.random.uniform(0,24))
SecondMatrix = np.array([m]).reshape((5,5))
with open("data_float.txt",'w',encoding = 'utf-8') as f:
  for i in SecondMatrix:
    f.write(f'{i},\n')
print("")
print("Matrix of 5*5 flaots:")
!cat data_float.txt

#Convert to csv file
import csv
with open('data_float.txt', 'r',encoding = 'utf-8') as f1:
  with open('data_float.csv', 'w',newline='')as f2:
    writer = csv.writer(f2)
    for line in csv.reader(f1, delimiter="'"):
      writer.writerow([f'{line}'])
      print('l',line)
!cat data_float.csv

"""# ***Exe.2:***
Load the file user_data.json, which can be found at:

https://www.dropbox.com/s/sz5klcdpckc39hd/user_data.json

and filter the data by the "CreditCardType" when it equals to "American Express". Than save the data to a new CSV file.
"""

!wget https://www.dropbox.com/s/sz5klcdpckc39hd/user_data.json

import json 
Data = json.load(open('user_data.json'))
z = []
for i in range(len(Data)): #Filter the data
  if Data[i]['CreditCardType'] == "American Express":
    z.append(Data[i])
print(z)

OutputFile = open("NewFile.json", "w")
json.dump(z , OutputFile , indent = 6)
OutputFile.close()

import json
with open('NewFile.json') as json_file:
    Data2 = json.load(json_file)
DataOfEmploees = Data2
NewCSV = open('NewCsvFile.csv', 'w')
CsvWriter = csv.writer(NewCSV)
Count = 0
for emp in DataOfEmploees:
    if Count == 0:
        header = emp.keys()
        CsvWriter.writerow(header)
        Count += 1
    CsvWriter.writerow(emp.values())

#Our csv file
!cat NewCsvFile.csv

"""# ***Exe.3:***
Load the file from this url:

https://www.dropbox.com/s/kgshemfgk22iy79/mushrooms_categorized.csv
with Pandas.

explore and print the DataFrame

calculate, using groupby(), the average value of each feature, separately for each class
save the file in a JSON format.
"""

!wget https://www.dropbox.com/s/kgshemfgk22iy79/mushrooms_categorized.csv

df = pd.read_csv('mushrooms_categorized.csv')

#Print and explore dataframe
df

df.head()

#Group by - Average value of each feature
#We have two class 0 and 1 
Average = df.groupby('class') 
print(Average.mean())

#Save in json format
a = Average.mean().reset_index()
JsonAverage = a.to_json("Average.json")
!cat Average.json

"""# ***Exe.4:***
Get the binary file named credit_card.dat from this address:

https://www.dropbox.com/s/8m0syw2tkul3dap/credit_card.dat

and convert the data into the real credit card number, knowing that:

each line corresponds to a credit card number, which consists of 16 characters (which are numbers in the 0-9 range) divided in 4 blocks, with a whitespace between each block

each character is written using a 6 bit binary representation (including the whitespace)

the final 4 bits of each line are a padding used to determine the end of the line, and can be ignored

Hint: convert the binary numbers to the decimal representation first, and then use the chr() function to convert the latter to a char
"""

!wget https://www.dropbox.com/s/8m0syw2tkul3dap/credit_card.dat

BinaryFile = "credit_card.dat"
print(BinaryFile)

with open(BinaryFile , 'r') as NewBinaryFile:
  print("The credit Card numbers are: \n")
  Count = 1
  for lines in NewBinaryFile:
    if (Count != 51):
      print(Count, ")" , ''.join([chr(int(lines[i:i+6],2)) for i in range(0, len(lines), 6)]))   #We can also use lambda for this if, lambda i: conditions we need.
      Count += 1

"""# ***Exe.5:***

"""

!wget https://www.dropbox.com/s/9nu2i111if55135/data_000637.dat -P ./data/    #Get Binary file

!wget https://www.dropbox.com/s/ga9wi6b40cakgae/data_000637.txt -P data/    #Get text file

BinaryFile = "data_000637.dat"
print(BinaryFile)

import struct
df = pd.read_csv("data/data_000637.txt" , nrows = 10)
print(df)

with open(BinaryFile, 'wb') as binary_file:
    for Lines in df.values: 
        Word =  (Lines[5] << 0 ) 
        Word += (Lines[4] << 5 ) 
        Word += (Lines[3] << 17) 
        Word += (Lines[2] << 49) 
        Word += (Lines[1] << 58)
        Word += (Lines[0] << 62)
        binary_file.write(struct.pack('<q', Word))
Columns = ['HEAD', 'FPGA', 'CHANNEL', 'ORBIT_CNT', 'BX_CNT', 'TDC_MEAS']    #Columns of our dataframe
df1 = pd.DataFrame({}, columns = Columns)

import os
import math
with open( BinaryFile , 'rb') as file:
    InsideFile = file.read()
    Counter = 0
    for i in range(0, len(InsideFile), 8):
        WordSize = 8
        Counter += 1
        if Counter > 10: break
        Word = struct.unpack('<q', InsideFile[i : i + WordSize])[0] 
        head     = (Word >> 62) & 0x3
        fpga     = (Word >> 58) & 0xF
        tdc_chan = (Word >> 49) & 0x1FF
        orb_cnt  = (Word >> 17) & 0xFFFFFFFF
        bx       = (Word >> 5 ) & 0xFFF
        tdc_meas = (Word >> 0 ) & 0x1F
        Columns2 = {'HEAD' : head, 'FPGA' : fpga, 'CHANNEL' : tdc_chan, 'ORBIT_CNT' : orb_cnt, 'BX_CNT' : bx, 'TDC_MEAS' : tdc_meas}
        dataframe = df1.append(Columns2 , ignore_index=True)

print("The dataframe: \n" , dataframe)
print("")

#Get the differences between sizes
DatFile = r"data_000637.dat"
SizeDatFile = os.path.getsize(DatFile)
print("The size of dat file is:" , SizeDatFile , "bytes")
TextFile = r"data/data_000637.txt"
SizeTextFile = os.path.getsize(TextFile)
print("The size of text file is:" , SizeTextFile , "bytes")
#Difference
print("Difference between dat file and text file is:" , abs(SizeDatFile - SizeTextFile) , "bytes")